import { Hono } from "hono"
import { prisma } from "../database/prisma/prisma"
import { compare, hash } from "bcryptjs"
import { sign } from "jsonwebtoken"

export const authRoute = new Hono()
    // üîπ Regisztr√°ci√≥ v√©gpont
    .post('/signup', async (c) => {
        const { firstName, lastName, userName, email, password } = await c.req.json()

        // Ellen≈ërizz√ºk, hogy az email vagy username m√°r l√©tezik-e
        const existingUser = await prisma.users.findFirst({
            where: { OR: [{ email }, { userName }] }
        })
        if (existingUser) return c.json({ error: 'Email vagy felhaszn√°l√≥n√©v m√°r foglalt' }, 400)
    
        // Jelsz√≥ hash-el√©se
        const hashedPassword = await hash(password, 10)
    
        // √öj felhaszn√°l√≥ ment√©se
        await prisma.users.create({
            data: { firstName, lastName, userName, email, password: hashedPassword }
        })
    
        return c.json({ message: 'Sikeres regisztr√°ci√≥' })
    })
    // üîπ Bejelentkez√©s v√©gpont
    .post('/login', async (c) => {
        const { email, password } = await c.req.json()
    
        const user = await prisma.users.findUnique({ where: { email } })
        if (!user) return c.json({ error: 'Hib√°s email vagy jelsz√≥' }, 400)
    
        const passwordMatch = await compare(password, user.password)
        if (!passwordMatch) return c.json({ error: 'Hib√°s email vagy jelsz√≥' }, 400)
    
        const token = sign({ userId: user.id }, 'secret_key', { expiresIn: '1h' })
    
        return c.json({ message: 'Sikeres bejelentkez√©s', token })
    })
    // üîπ Profil adatok v√©gpont
